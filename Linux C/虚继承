继承：
继承一个虚表指针，虚表指针指向了虚表，里面存的是虚函数的地址，子类如果函数名,参数和返回值相同，则会替换虚表中的对应函数地址，这就是虚函数的原理
多重继承：
多重继承会保存每个父类的虚表指针，继承几个就有几个虚表指针
虚继承：为了解决菱形继承的问题
在继承的基础上前面加一个virtual关键字
对于虚继承，如果有父类有成员变量，那么派生类就会创建一个自己的虚表指针，把自己类的虚函数放到自己的虚表里，这样是为了让父类的虚表保持一个状态，不会因为子类的虚函数而改变，这样也就保证了虚继承可以防止菱形继承这个问题。
对于虚继承，c继承了a，b。c的对象里现在有几个成员：
1.base的虚表指针（有且只有一份），b的虚表指针，c的虚表指针 
2.a的成员变量（有且只有一份），b的成员变量，c的成员变量  
3.自己的成员变量
这就是虚继承的实现，它把重复的虚表指针和数据忽略了，只存留一份，避免了重复的问题

             base   vptr.base
            /    \
           /      \
          /        \
vptr.a   A          B vptr.b vptr.base
vptr.base \        /  
           \      /
            \    /
              C  vptr.base vptr.a vptr.b
class base
{
public:
    virtual void func()
    {}
    int data;
};
class A : virtual public base
{
    virtual void f(){}
};
class B : virtual public base
{
};
class C : public A, public B
{};
