#include "gen_list.h"
#include "tools.h"
#include <strings.h>
#include <ctype.h>
static void get_item(char *sub_str, char *item_str)
{
    int i = 0;
    int flag = 0;
    int sub_len = strlen(sub_str);
 
    while(i < sub_len){
        if(sub_str[i] == '('){
            flag++;    
        }
        if(sub_str[i] == ')'){
            flag--;
        }
        //当前没有在子表里，逗号可以进行元素分割
        if(flag == 0 && sub_str[i] == ','){
            break ;
        }
        i++;     
    }   

    //获取广义表元素
    if(i == sub_len){    //只有一个元素
        strcpy(item_str, sub_str);
        sub_str[0] = '\0';
    }else{    //把当前的元素复制给item_str,并且在原列表删除复制的元素
        strncpy(item_str, sub_str, i);
        item_str[i] = '\0';
        strcpy(sub_str, sub_str + i + 1);
    }
}

static Gen_list create_genlist(char *str);
static Boolean string_is_empty(const char *str);
static Gen_node *create_head_node(int head_flag);
static Gen_node *create_int_node(int int_value);
static Gen_node *create_char_node(char char_value);
static char *blank_delete(char *string);
static void delete_braket(const char *src_str,char *des_str,int src_len);
static void get_item1(char *sub_str,char *item);
static Gen_node *create_node(void);
static void get_item(char *sub_str, char *item_str)
{
    int i = 0;
    int flag = 0;
    int sub_len = strlen(sub_str);
 
    while(i < sub_len){
        if(sub_str[i] == '('){
            flag++;    
        }
        if(sub_str[i] == ')'){
            flag--;
        }
        //当前没有在子表里，逗号可以进行元素分割
        if(flag == 0 && sub_str[i] == ','){
            break ;
        }
        i++;     
    }   

    //获取广义表元素
    if(i == sub_len){    //只有一个元素
        strcpy(item_str, sub_str);
        sub_str[0] = '\0';
    }else{    //把当前的元素复制给item_str,并且在原列表删除复制的元素
        strncpy(item_str, sub_str, i);
        item_str[i] = '\0';
        strcpy(sub_str, sub_str + i + 1);
    }
}

static void get_item1(char *sub_str,char *item)
{
    int i = 0;
    int flag = 0;
    int sub_len = strlen(sub_str);
    while(i < sub_len){
        if(sub_str[i] == '('){
            flag++;
        }
        else if(sub_str[i] == ')'){
            flag--;
        }
        if(flag == 0 && sub_str[i] == ',')
            break;
        i++;
    }
    if(i == sub_len){
        strcpy(item,sub_str);
        sub_str[0] = '\0';
    }
    else{
        strncpy(item,sub_str,i);
        item[i] = '\0';
        strcpy(sub_str,sub_str+i+1);
    }
}
static void delete_braket(const char *src_str,char *des_str,int src_len)
{
    strncpy(des_str,src_str+1,src_len-2);
}
static char *blank_delete(char *string)
{
    int i = 0;
    int j = 0;
    int length = strlen(string);

    if(string == NULL){
        return NULL;
    }
    while(i < length){
        if(isblank(string[i])){
            i++;
            continue;
        }
        string[j++] = string[i++];
    }
    return string;
}


static Gen_node *create_int_node(int int_value)
{
    Gen_node *node = create_node();
    node->n_type = INT_FLAG;
    node->value.int_value = int_value;
    return node;
}
static Gen_node *create_char_node(char char_value)
{
    Gen_node *node = create_node();
    node->n_type = CHAR_FLAG;
    node->value.char_value = char_value;
    return node;
}
static Gen_node *create_head_node(int head_flag){
    Gen_node *node = create_node();
    node->n_type = HEAD_FLAG;
    node->value.head_flag = head_flag;
    return node;
}
static Gen_node *create_list_node(Gen_node *c_node)
{
    Gen_node *node = create_node();
    node->n_type = LIST_FLAG;
    node->value.head = c_node;
    return node;
}
static Boolean is_input_empty(const char *string)
{
    return strlen(string) == 0 || strcmp(string,"()") == 0;
}
static Gen_list create_genlist(char *str)
{
    char *sub_str = NULL;
    char *item = NULL;
    int str_len = strlen(str);
    Gen_node *node = NULL;
    if(is_input_empty(str) == TRUE){
        fprintf(stderr,"str is empty");
        return NULL;
    }
    Gen_list start = create_head_node(1);//广义表头节点
    node = start;
    //1.剥离字符
    //如果遇见了',',那么就插入到广义表,如果遇见了'(',那么就遍历
    //直到括号匹配的位置,然后记录该位置,当没有遇到'('时,就挨个插入.
    //然后递归,遇到记录位置就结束
    sub_str = (char *)Malloc(sizeof(char)*str_len);
    item = (char *)Malloc(sizeof(char)*str_len);
    delete_braket(str,sub_str,str_len);
    while(strlen(sub_str)){
        get_item(sub_str,item);
        if(item[0] != '(' && item[0] != '\''){
            node->next = create_int_node(atoi(item));
        }
        else if(item[0] != '(' && item[0] == '\''){
            node->next = create_char_node(item[1]);
        }
        else
            node->next = create_list_node(create_genlist(item));
        node = node->next;
    }

    free(sub_str);
    free(item);

    return start;
}
static Gen_node *create_node(void)
{
    Gen_node *g_node;
    g_node = (Gen_node *)Malloc(sizeof(Gen_node));
    bzero(g_node,sizeof(Gen_node));
    return g_node;
}
static Boolean string_is_empty(const char *str)
{
    str++;
    if(*str == ')'){
        return FALSE;
    }
}
static Boolean match_symb(char *str);
static Boolean match_symb(char *str)
{
    char *get_str1 = str;
    char *get_str2 = str;
    int count = 0;
    while(*get_str1){
        if(*get_str1 == ')'){
            count--;
        }
        if(*get_str1 == '('){
            count++;
        }
        if(count < 0){
            return FALSE;
        }
        get_str1++;
    }
    if(count == 0){
        while(get_str2){
            if(*get_str2 == '\''){
                count++;
            }
            if(count / 2 == 0){
                return TRUE;
            }
        }
    }
}
Gen_list init_genlist(char *input_str)
{
    if(input_str == NULL || !match_symb(input_str)
       || !strlen(input_str)){
        return NULL;
    }
    blank_delete(input_str);
    return create_genlist(input_str);
}
static void show_genlist_value(Gen_list gen_list)
{
    Gen_node *node;
    if(gen_list == NULL)
        return ;
    node = gen_list->next;
    while(node){
        if(node->n_type == INT_FLAG){
            printf("%d ",node->value.int_value);
        }
        else if(node->n_type == CHAR_FLAG){
            printf("'%c' ",node->value.char_value);
        }
        else if(node->n_type == LIST_FLAG){
            show_genlist_value(node);
        }
        if(node->next){
            printf(",");
        }
        node = node->next;
    }
}
void show_genlist(Gen_list gen_list)
{
    show_genlist_value(gen_list);
    printf("\n");
}
void destroy_genlist(Gen_list *gen_list)
{
    Gen_node *node;
    if(gen_list == NULL || *gen_list == NULL)
        return ;
    node = *gen_list;
    while(node){
        *gen_list = node->next;
        if(node->n_type == LIST_FLAG){
            destroy_genlist(&(node->value.head));
        }
        free(node);
        node = *gen_list;
    }
    *gen_list = NULL;
}
