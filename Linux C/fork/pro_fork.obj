
pro_fork:     file format elf64-x86-64


Disassembly of section .init:

0000000000400640 <_init>:
  400640:	48 83 ec 08          	sub    $0x8,%rsp
  400644:	48 8b 05 ad 09 20 00 	mov    0x2009ad(%rip),%rax        # 600ff8 <_DYNAMIC+0x1e0>
  40064b:	48 85 c0             	test   %rax,%rax
  40064e:	74 05                	je     400655 <_init+0x15>
  400650:	e8 7b 00 00 00       	callq  4006d0 <__gmon_start__@plt>
  400655:	48 83 c4 08          	add    $0x8,%rsp
  400659:	c3                   	retq   

Disassembly of section .plt:

0000000000400660 <putchar@plt-0x10>:
  400660:	ff 35 a2 09 20 00    	pushq  0x2009a2(%rip)        # 601008 <_GLOBAL_OFFSET_TABLE_+0x8>
  400666:	ff 25 a4 09 20 00    	jmpq   *0x2009a4(%rip)        # 601010 <_GLOBAL_OFFSET_TABLE_+0x10>
  40066c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000400670 <putchar@plt>:
  400670:	ff 25 a2 09 20 00    	jmpq   *0x2009a2(%rip)        # 601018 <_GLOBAL_OFFSET_TABLE_+0x18>
  400676:	68 00 00 00 00       	pushq  $0x0
  40067b:	e9 e0 ff ff ff       	jmpq   400660 <_init+0x20>

0000000000400680 <__errno_location@plt>:
  400680:	ff 25 9a 09 20 00    	jmpq   *0x20099a(%rip)        # 601020 <_GLOBAL_OFFSET_TABLE_+0x20>
  400686:	68 01 00 00 00       	pushq  $0x1
  40068b:	e9 d0 ff ff ff       	jmpq   400660 <_init+0x20>

0000000000400690 <puts@plt>:
  400690:	ff 25 92 09 20 00    	jmpq   *0x200992(%rip)        # 601028 <_GLOBAL_OFFSET_TABLE_+0x28>
  400696:	68 02 00 00 00       	pushq  $0x2
  40069b:	e9 c0 ff ff ff       	jmpq   400660 <_init+0x20>

00000000004006a0 <getpid@plt>:
  4006a0:	ff 25 8a 09 20 00    	jmpq   *0x20098a(%rip)        # 601030 <_GLOBAL_OFFSET_TABLE_+0x30>
  4006a6:	68 03 00 00 00       	pushq  $0x3
  4006ab:	e9 b0 ff ff ff       	jmpq   400660 <_init+0x20>

00000000004006b0 <printf@plt>:
  4006b0:	ff 25 82 09 20 00    	jmpq   *0x200982(%rip)        # 601038 <_GLOBAL_OFFSET_TABLE_+0x38>
  4006b6:	68 04 00 00 00       	pushq  $0x4
  4006bb:	e9 a0 ff ff ff       	jmpq   400660 <_init+0x20>

00000000004006c0 <__libc_start_main@plt>:
  4006c0:	ff 25 7a 09 20 00    	jmpq   *0x20097a(%rip)        # 601040 <_GLOBAL_OFFSET_TABLE_+0x40>
  4006c6:	68 05 00 00 00       	pushq  $0x5
  4006cb:	e9 90 ff ff ff       	jmpq   400660 <_init+0x20>

00000000004006d0 <__gmon_start__@plt>:
  4006d0:	ff 25 72 09 20 00    	jmpq   *0x200972(%rip)        # 601048 <_GLOBAL_OFFSET_TABLE_+0x48>
  4006d6:	68 06 00 00 00       	pushq  $0x6
  4006db:	e9 80 ff ff ff       	jmpq   400660 <_init+0x20>

00000000004006e0 <strerror@plt>:
  4006e0:	ff 25 6a 09 20 00    	jmpq   *0x20096a(%rip)        # 601050 <_GLOBAL_OFFSET_TABLE_+0x50>
  4006e6:	68 07 00 00 00       	pushq  $0x7
  4006eb:	e9 70 ff ff ff       	jmpq   400660 <_init+0x20>

00000000004006f0 <sleep@plt>:
  4006f0:	ff 25 62 09 20 00    	jmpq   *0x200962(%rip)        # 601058 <_GLOBAL_OFFSET_TABLE_+0x58>
  4006f6:	68 08 00 00 00       	pushq  $0x8
  4006fb:	e9 60 ff ff ff       	jmpq   400660 <_init+0x20>

0000000000400700 <fork@plt>:
  400700:	ff 25 5a 09 20 00    	jmpq   *0x20095a(%rip)        # 601060 <_GLOBAL_OFFSET_TABLE_+0x60>
  400706:	68 09 00 00 00       	pushq  $0x9
  40070b:	e9 50 ff ff ff       	jmpq   400660 <_init+0x20>

Disassembly of section .text:

0000000000400710 <_start>:
  400710:	31 ed                	xor    %ebp,%ebp
  400712:	49 89 d1             	mov    %rdx,%r9
  400715:	5e                   	pop    %rsi
  400716:	48 89 e2             	mov    %rsp,%rdx
  400719:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
  40071d:	50                   	push   %rax
  40071e:	54                   	push   %rsp
  40071f:	49 c7 c0 b0 09 40 00 	mov    $0x4009b0,%r8
  400726:	48 c7 c1 40 09 40 00 	mov    $0x400940,%rcx
  40072d:	48 c7 c7 00 08 40 00 	mov    $0x400800,%rdi
  400734:	e8 87 ff ff ff       	callq  4006c0 <__libc_start_main@plt>
  400739:	f4                   	hlt    
  40073a:	66 90                	xchg   %ax,%ax
  40073c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000400740 <deregister_tm_clones>:
  400740:	b8 77 10 60 00       	mov    $0x601077,%eax
  400745:	55                   	push   %rbp
  400746:	48 2d 70 10 60 00    	sub    $0x601070,%rax
  40074c:	48 83 f8 0e          	cmp    $0xe,%rax
  400750:	48 89 e5             	mov    %rsp,%rbp
  400753:	77 02                	ja     400757 <deregister_tm_clones+0x17>
  400755:	5d                   	pop    %rbp
  400756:	c3                   	retq   
  400757:	b8 00 00 00 00       	mov    $0x0,%eax
  40075c:	48 85 c0             	test   %rax,%rax
  40075f:	74 f4                	je     400755 <deregister_tm_clones+0x15>
  400761:	5d                   	pop    %rbp
  400762:	bf 70 10 60 00       	mov    $0x601070,%edi
  400767:	ff e0                	jmpq   *%rax
  400769:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000400770 <register_tm_clones>:
  400770:	b8 70 10 60 00       	mov    $0x601070,%eax
  400775:	55                   	push   %rbp
  400776:	48 2d 70 10 60 00    	sub    $0x601070,%rax
  40077c:	48 c1 f8 03          	sar    $0x3,%rax
  400780:	48 89 e5             	mov    %rsp,%rbp
  400783:	48 89 c2             	mov    %rax,%rdx
  400786:	48 c1 ea 3f          	shr    $0x3f,%rdx
  40078a:	48 01 d0             	add    %rdx,%rax
  40078d:	48 d1 f8             	sar    %rax
  400790:	75 02                	jne    400794 <register_tm_clones+0x24>
  400792:	5d                   	pop    %rbp
  400793:	c3                   	retq   
  400794:	ba 00 00 00 00       	mov    $0x0,%edx
  400799:	48 85 d2             	test   %rdx,%rdx
  40079c:	74 f4                	je     400792 <register_tm_clones+0x22>
  40079e:	5d                   	pop    %rbp
  40079f:	48 89 c6             	mov    %rax,%rsi
  4007a2:	bf 70 10 60 00       	mov    $0x601070,%edi
  4007a7:	ff e2                	jmpq   *%rdx
  4007a9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000004007b0 <__do_global_dtors_aux>:
  4007b0:	80 3d b9 08 20 00 00 	cmpb   $0x0,0x2008b9(%rip)        # 601070 <__TMC_END__>
  4007b7:	75 11                	jne    4007ca <__do_global_dtors_aux+0x1a>
  4007b9:	55                   	push   %rbp
  4007ba:	48 89 e5             	mov    %rsp,%rbp
  4007bd:	e8 7e ff ff ff       	callq  400740 <deregister_tm_clones>
  4007c2:	5d                   	pop    %rbp
  4007c3:	c6 05 a6 08 20 00 01 	movb   $0x1,0x2008a6(%rip)        # 601070 <__TMC_END__>
  4007ca:	f3 c3                	repz retq 
  4007cc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004007d0 <frame_dummy>:
  4007d0:	48 83 3d 38 06 20 00 	cmpq   $0x0,0x200638(%rip)        # 600e10 <__JCR_END__>
  4007d7:	00 
  4007d8:	74 1e                	je     4007f8 <frame_dummy+0x28>
  4007da:	b8 00 00 00 00       	mov    $0x0,%eax
  4007df:	48 85 c0             	test   %rax,%rax
  4007e2:	74 14                	je     4007f8 <frame_dummy+0x28>
  4007e4:	55                   	push   %rbp
  4007e5:	bf 10 0e 60 00       	mov    $0x600e10,%edi
  4007ea:	48 89 e5             	mov    %rsp,%rbp
  4007ed:	ff d0                	callq  *%rax
  4007ef:	5d                   	pop    %rbp
  4007f0:	e9 7b ff ff ff       	jmpq   400770 <register_tm_clones>
  4007f5:	0f 1f 00             	nopl   (%rax)
  4007f8:	e9 73 ff ff ff       	jmpq   400770 <register_tm_clones>
  4007fd:	0f 1f 00             	nopl   (%rax)

0000000000400800 <main>:
#include <apue.h>

int run = 1;

int main(void)
{
  400800:	55                   	push   %rbp
  400801:	48 89 e5             	mov    %rsp,%rbp
  400804:	48 83 ec 10          	sub    $0x10,%rsp
    pid_t chid;
    chid = fork();
  400808:	e8 f3 fe ff ff       	callq  400700 <fork@plt>
  40080d:	89 45 f4             	mov    %eax,-0xc(%rbp)
    if(0 > chid){
  400810:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  400814:	79 48                	jns    40085e <main+0x5e>
       logerr("fork error\n");
  400816:	e8 65 fe ff ff       	callq  400680 <__errno_location@plt>
  40081b:	8b 00                	mov    (%rax),%eax
  40081d:	89 c7                	mov    %eax,%edi
  40081f:	e8 bc fe ff ff       	callq  4006e0 <strerror@plt>
  400824:	48 89 c1             	mov    %rax,%rcx
  400827:	ba 0a 00 00 00       	mov    $0xa,%edx
  40082c:	be d0 09 40 00       	mov    $0x4009d0,%esi
  400831:	bf db 09 40 00       	mov    $0x4009db,%edi
  400836:	b8 00 00 00 00       	mov    $0x0,%eax
  40083b:	e8 70 fe ff ff       	callq  4006b0 <printf@plt>
  400840:	bf eb 09 40 00       	mov    $0x4009eb,%edi
  400845:	e8 46 fe ff ff       	callq  400690 <puts@plt>
  40084a:	bf 0a 00 00 00       	mov    $0xa,%edi
  40084f:	e8 1c fe ff ff       	callq  400670 <putchar@plt>
       return 1;
  400854:	b8 01 00 00 00       	mov    $0x1,%eax
  400859:	e9 d8 00 00 00       	jmpq   400936 <main+0x136>
    }else if(0 == chid){
  40085e:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  400862:	75 67                	jne    4008cb <main+0xcb>
    //child space
        int count = 0;
  400864:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
        while(run){
  40086b:	eb 39                	jmp    4008a6 <main+0xa6>
            printf("I'm child,%d,%d\n",chid,getpid());
  40086d:	e8 2e fe ff ff       	callq  4006a0 <getpid@plt>
  400872:	89 c2                	mov    %eax,%edx
  400874:	8b 45 f4             	mov    -0xc(%rbp),%eax
  400877:	89 c6                	mov    %eax,%esi
  400879:	bf f6 09 40 00       	mov    $0x4009f6,%edi
  40087e:	b8 00 00 00 00       	mov    $0x0,%eax
  400883:	e8 28 fe ff ff       	callq  4006b0 <printf@plt>
            if(++count > 2){
  400888:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  40088c:	83 7d fc 02          	cmpl   $0x2,-0x4(%rbp)
  400890:	7e 0a                	jle    40089c <main+0x9c>
                run = 0;
  400892:	c7 05 d0 07 20 00 00 	movl   $0x0,0x2007d0(%rip)        # 60106c <run>
  400899:	00 00 00 
            }
            sleep(1);
  40089c:	bf 01 00 00 00       	mov    $0x1,%edi
  4008a1:	e8 4a fe ff ff       	callq  4006f0 <sleep@plt>
       logerr("fork error\n");
       return 1;
    }else if(0 == chid){
    //child space
        int count = 0;
        while(run){
  4008a6:	8b 05 c0 07 20 00    	mov    0x2007c0(%rip),%eax        # 60106c <run>
  4008ac:	85 c0                	test   %eax,%eax
  4008ae:	75 bd                	jne    40086d <main+0x6d>
            if(++count > 2){
                run = 0;
            }
            sleep(1);
        }
        fork();
  4008b0:	e8 4b fe ff ff       	callq  400700 <fork@plt>
        printf("count:%d\n",count);
  4008b5:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4008b8:	89 c6                	mov    %eax,%esi
  4008ba:	bf 07 0a 40 00       	mov    $0x400a07,%edi
  4008bf:	b8 00 00 00 00       	mov    $0x0,%eax
  4008c4:	e8 e7 fd ff ff       	callq  4006b0 <printf@plt>
  4008c9:	eb 50                	jmp    40091b <main+0x11b>
    }else{
    //father space
        int count = 0;
  4008cb:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
        while(run){
  4008d2:	eb 3d                	jmp    400911 <main+0x111>
            printf("father running {child:%d,self:%d}\n",chid,getpid());
  4008d4:	e8 c7 fd ff ff       	callq  4006a0 <getpid@plt>
  4008d9:	89 c2                	mov    %eax,%edx
  4008db:	8b 45 f4             	mov    -0xc(%rbp),%eax
  4008de:	89 c6                	mov    %eax,%esi
  4008e0:	bf 18 0a 40 00       	mov    $0x400a18,%edi
  4008e5:	b8 00 00 00 00       	mov    $0x0,%eax
  4008ea:	e8 c1 fd ff ff       	callq  4006b0 <printf@plt>
            if(count++ > 5){
  4008ef:	8b 45 f8             	mov    -0x8(%rbp),%eax
  4008f2:	8d 50 01             	lea    0x1(%rax),%edx
  4008f5:	89 55 f8             	mov    %edx,-0x8(%rbp)
  4008f8:	83 f8 05             	cmp    $0x5,%eax
  4008fb:	7e 0a                	jle    400907 <main+0x107>
                run = 0;
  4008fd:	c7 05 65 07 20 00 00 	movl   $0x0,0x200765(%rip)        # 60106c <run>
  400904:	00 00 00 
            }
            sleep(1);
  400907:	bf 01 00 00 00       	mov    $0x1,%edi
  40090c:	e8 df fd ff ff       	callq  4006f0 <sleep@plt>
        fork();
        printf("count:%d\n",count);
    }else{
    //father space
        int count = 0;
        while(run){
  400911:	8b 05 55 07 20 00    	mov    0x200755(%rip),%eax        # 60106c <run>
  400917:	85 c0                	test   %eax,%eax
  400919:	75 b9                	jne    4008d4 <main+0xd4>
            }
            sleep(1);
        }
    }

    printf("Process end %d\n",getpid());
  40091b:	e8 80 fd ff ff       	callq  4006a0 <getpid@plt>
  400920:	89 c6                	mov    %eax,%esi
  400922:	bf 3b 0a 40 00       	mov    $0x400a3b,%edi
  400927:	b8 00 00 00 00       	mov    $0x0,%eax
  40092c:	e8 7f fd ff ff       	callq  4006b0 <printf@plt>
    return 0;
  400931:	b8 00 00 00 00       	mov    $0x0,%eax
}
  400936:	c9                   	leaveq 
  400937:	c3                   	retq   
  400938:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40093f:	00 

0000000000400940 <__libc_csu_init>:
  400940:	41 57                	push   %r15
  400942:	41 89 ff             	mov    %edi,%r15d
  400945:	41 56                	push   %r14
  400947:	49 89 f6             	mov    %rsi,%r14
  40094a:	41 55                	push   %r13
  40094c:	49 89 d5             	mov    %rdx,%r13
  40094f:	41 54                	push   %r12
  400951:	4c 8d 25 a8 04 20 00 	lea    0x2004a8(%rip),%r12        # 600e00 <__frame_dummy_init_array_entry>
  400958:	55                   	push   %rbp
  400959:	48 8d 2d a8 04 20 00 	lea    0x2004a8(%rip),%rbp        # 600e08 <__init_array_end>
  400960:	53                   	push   %rbx
  400961:	4c 29 e5             	sub    %r12,%rbp
  400964:	31 db                	xor    %ebx,%ebx
  400966:	48 c1 fd 03          	sar    $0x3,%rbp
  40096a:	48 83 ec 08          	sub    $0x8,%rsp
  40096e:	e8 cd fc ff ff       	callq  400640 <_init>
  400973:	48 85 ed             	test   %rbp,%rbp
  400976:	74 1e                	je     400996 <__libc_csu_init+0x56>
  400978:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40097f:	00 
  400980:	4c 89 ea             	mov    %r13,%rdx
  400983:	4c 89 f6             	mov    %r14,%rsi
  400986:	44 89 ff             	mov    %r15d,%edi
  400989:	41 ff 14 dc          	callq  *(%r12,%rbx,8)
  40098d:	48 83 c3 01          	add    $0x1,%rbx
  400991:	48 39 eb             	cmp    %rbp,%rbx
  400994:	75 ea                	jne    400980 <__libc_csu_init+0x40>
  400996:	48 83 c4 08          	add    $0x8,%rsp
  40099a:	5b                   	pop    %rbx
  40099b:	5d                   	pop    %rbp
  40099c:	41 5c                	pop    %r12
  40099e:	41 5d                	pop    %r13
  4009a0:	41 5e                	pop    %r14
  4009a2:	41 5f                	pop    %r15
  4009a4:	c3                   	retq   
  4009a5:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%rax,%rax,1)
  4009ac:	00 00 00 00 

00000000004009b0 <__libc_csu_fini>:
  4009b0:	f3 c3                	repz retq 
  4009b2:	66 90                	xchg   %ax,%ax

Disassembly of section .fini:

00000000004009b4 <_fini>:
  4009b4:	48 83 ec 08          	sub    $0x8,%rsp
  4009b8:	48 83 c4 08          	add    $0x8,%rsp
  4009bc:	c3                   	retq   
