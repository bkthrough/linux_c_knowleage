1.register:
将变量放入寄存器中
2.static:
(1)静态局部变量:
	在函数中每变化一次,值就变化为现在的值.
(2)静态全局变量:
	在函数外部定义或声明,存储在rw区,对于外部模块不可见.
(3)静态函数:
	外部模块不可见.
3.sizeof:
	变量的占用的空间大小
与strlen的区别:sizeof是关键字,测量的是占用的空间.
		strlen是函数,遇见0则停止计算
4.break
	跳出循环.
5.continue
	跳出本层循环,进入下一次循环
6.goto:
	跳转语句.
例:  if(x > 0){
	goto cons1;
	}
cons1:
	return 0;
7.const常变量
	(1).const int *a
表示a指向的单元不可改变.其实不能用*a = 其他数值来改变.
a指向的单元可以通过一个指针来改变
例子:
	int i = 3;     const int *a = &i;    int *p = &i;   *p = 5;
这时a指向的单元就被改变了- -
	(2).int * const a
a不能改变,但是可以改变a指向的值,就是改变*a
8.volatile
	让变量取消编译器优化,一直存到一个地方,防止有指针指向它就够却找不到
9.union:
共用体,变量在同一块内存中,如果有两个变量,一个定义赋值了,一个并没有赋值,那么没有赋值的变量在位上等于赋值的变量
	小技巧:可以判断大小端;
大端:数值的最高byte在前面;
小端:数值的最低byte在前面;
如0x12345678
大端:
12  34  56  78
小端:
78  56  34  12
union{
    char a;
    int b;
}s
s.a = 1;
if(s.b == 1){
	printf("小端");
}
| a  |    |    |    |
          b
0000 0001在前面
因为是小端最低位在前面,所以是 s.b == 00000000 00000000 00000000 00000001;
10.struct
注意内存分配情况
(1).上面所有字节的是下一个占字节的倍数
(2).总的字节是最大字节的倍数
如
struct{
4	int a;      4
8  	long b;     12 -- >  16 
1	char c;     17
4	float d;    21 -- > 24
}x;
11.typedef
	类型重定义
